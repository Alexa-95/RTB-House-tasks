{"version":3,"sources":["_counter.js","_image.js","_offers.js","_showActiveBorder.js","_slider.js","script.js"],"names":["daysCount","hoursCount","minutesCount","secoundsCount","timeToCount","firstDay","Date","getTime","countDownDate","countToDate","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","app","counter","innerHTML","clearInterval","dot","document","getElementById","style","opacity","getLogo","imageDiv","forEach","e","imageUrl","split","pop","shift","async","getapi","url","response","fetch","data","json","console","log","status","show","err","arr","offers","list_div","task","random","sort","a","b","slice","getAttribute","id","item","createElement","classList","add","task_1","imgURL","name","price","currency","task_2","appendChild","showActiveBorder","showSlider","borderActive","collection","children","i","length","remove","setTimeout","slideIndex","api_url","App","[object Object]","this","getElementsByClassName","run"],"mappings":"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","file":"all.js","sourcesContent":["//Set how full time to countdown, default 7 days\nlet daysCount = 7;\nlet hoursCount = 0;\nlet minutesCount = 0;\nlet secoundsCount = 0;\n\nconst timeToCount = (daysCount * 24 * 60 * 60 * 1000) + (hoursCount * 60 * 60 * 1000) +\n  (minutesCount * 60 * 1000) + (secoundsCount * 24 * 60 * 60 * 1000);\n\n// Day that start counting days\nlet firstDay = new Date(\"March 25, 2022 12:00:00\").getTime();\n\n// Set the date we're counting down to\nlet countDownDate = firstDay + timeToCount;\n\n// Update the count down every 1 second\nconst countToDate = setInterval(function () {\n  // Get today's date and time\n  const now = new Date().getTime();\n\n  // Find the distance between now and the count down date\n  const distance = countDownDate - now;\n\n  // Time calculations for days, hours, minutes and seconds\n  const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n  // Display the result in counter\n  app.counter.innerHTML = ((days) ? days + \"d \" : '') + ((hours) ? hours + \"h \" : '') +\n    ((minutes) ? minutes + \"m\" : '');\n\n  // If the count down is finished, write some text\n  if (distance < 0) {\n    clearInterval(countToDate);\n    app.counter.innerHTML = \"Sorry, the sale is over\";\n  }\n  // Hide mark on every even number of seconds\n  else {\n    const dot = document.getElementById('dot');\n    (seconds % 2 !== 0) ? dot.style.opacity = \"0\": dot.style.opacity = \"1\";\n  }\n}, 1000);","function getLogo(imageDiv){\n  //Loop for every container for RTB Bouse logo on the page\n  [...imageDiv].forEach(e => {\n    //Insert img from url\n    e.innerHTML = `\n    <a href=\"https://www.rtbhouse.com/\" title=\"RTB House | Technology Powered by Deep Learning\" target=\"_blank\">\n    <img src=\"${imageUrl}\" class=\"${imageUrl.split(\"/\").pop().split(\".\").shift()}\" alt=\"${imageUrl.split(\"/\").pop()}\" width=\"408\" height=\"47\"/>\n    </a>\n    `;\n  });\n}","// Defining async function\nasync function getapi(url) {\n\ttry {\n\t\t// Storing response\n\t\tconst response = await fetch(url);\n\n\t\t// Storing data in form of JSON\n\t\tconst data = await response.json();\n\t\tif (response) {\n\t\t\tconsole.log(response.status);\n\t\t}\n\t\tshow(data);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// Function to define innerHTML\nfunction show(data) {\n\n\t// Define JSON data to array\n\tconst arr = data.offers;\n\n\t// Loop for each task container, set items in random order, get first N elements where N is value\n\t[...app.list_div].forEach((task) => {\n\t\tlet random = arr.sort((a, b) => 0.5 - Math.random()).slice(0, task.getAttribute(\"value\"));\n\t\tlet id = task.getAttribute(\"id\");\n\n\t\t// Create new div for every element\n\t\trandom.forEach(e => {\n\t\t\tlet item = document.createElement('div');\n\t\t\titem.classList.add('item');\n\n\t\t\t// Define innerHTML for task_1 item\n\t\t\tif (task.getAttribute(\"id\") === app.task_1.getAttribute(\"id\")) {\n\t\t\t\titem.innerHTML = `\n\t\t\t\t<img src=\"${e.imgURL}\" alt=\"${e.name}\" class=\"item_img\" />\n\t\t\t\t<span class=\"item_price\">\n\t\t\t\t\t<span>${e.price}</span>\n\t\t\t\t\t<span> ${e.currency}</span>\n\t\t\t\t</span>\n\t\t\t`;\n\t\t\t}\n\t\t\t// Define innerHTML for task_2\n\t\t\telse if (task.getAttribute(\"id\") === app.task_2.getAttribute(\"id\")) {\n\t\t\t\titem.innerHTML = `\n\t\t\t\t<span class=\"close\">x</span>\n\t\t\t\t<img src=\"${e.imgURL}\" alt=\"${e.name}\" class=\"item_img\" />\n\t\t\t\t<span class=\"item_title\">${e.name}</span>\n\t\t\t\t<span class=\"item_price\">\n\t\t\t\t\t<span>${e.price}</span>\n\t\t\t\t\t<span> ${e.currency}</span>\n\t\t\t\t\t</span>\n\t\t\t\t<button class=\"action_btn\">Check</button>\n\t\t\t`;\n\t\t\t} else {\n\t\t\t\t// Define innerHTML for other tasks, show all data\n\t\t\t\titem.innerHTML = `\n\t\t\t\t\t<img src=\"${e.imgURL}\" alt=\"${e.name}\" class=\"item_img\" />\n\t\t\t\t\t<span class=\"item_title\">${e.name}</span>\n\t\t\t\t\t<span class=\"item_price\">\n\t\t\t\t\t\t<span>${e.price}</span>\n\t\t\t\t\t\t<span> ${e.currency}</span>\n\t\t\t\t\t</span>\n\t\t\t\t`;\n\t\t\t}\n\t\t\tdocument.getElementById(id).appendChild(item);\n\t\t});\n\t\t//Start animating border for items in task_1\n\t\tif (task.getAttribute(\"id\") === app.task_1.getAttribute(\"id\")) {\n\t\t\tshowActiveBorder();\n\t\t}\n\t\t//Start slider for items in task_2\n\t\tif (task.getAttribute(\"id\") === app.task_2.getAttribute(\"id\")) {\n\t\t\tshowSlider();\n\t\t}\n\t});\n}","//default index = 0\nlet borderActive = 0;\nfunction showActiveBorder() {\n  //Collect all children of task_1 div in one array\n  const collection = [...app.task_1.children];\n\n  //Toggle class activeBorder, remove all\n  for (let i = 0; i < collection.length; i++) {\n    collection[i].classList.remove('activeBorder');  \n  }\n  borderActive++;\n  //Toggle class activeBorder, add for specific index\n  if (borderActive > collection.length) {borderActive = 1}    \n  collection[borderActive-1].classList.add('activeBorder');\n\n  setTimeout(showActiveBorder, 2000); // repeat every 2 seconds\n}","//default index for slider = 0 \nlet slideIndex = 0;\nfunction showSlider() {\n  //Collect all children of task_2 div in one array\n  const collection = [...app.task_2.children];\n\n  //Toggle class activeSlider, remove all\n  for (let i = 0; i < collection.length; i++) {\n    collection[i].classList.remove('activeSlider');  \n  }\n  slideIndex++;\n  //Toggle class activeSlider, add for specific index\n  if (slideIndex > collection.length) {slideIndex = 1}    \n  collection[slideIndex-1].classList.add('activeSlider');\n\n  setTimeout(showSlider, 2000); // repeat every 2 seconds\n}","//Global variables\nconst api_url = 'http://rekrutacjartb.pl/developer/banner.json';\nconst imageUrl = \"http://rekrutacjartb.pl/developer/images/logo_rtb.png\";\n\nclass App {\n  constructor({list_div, task_1, task_2, counter, imageDiv}){\n    this.list_div = list_div;\n    this.task_1 = task_1;\n    this.task_2 = task_2;\n    this.counter = counter;\n    this.imageDiv = imageDiv;\n  }\n  run() {\n    // Calling that async function\n    getapi(api_url);\n\n    //GetSet logo form URL\n    getLogo(this.imageDiv);\n  }\n}\n\nconst app = new App({\n  list_div: document.getElementsByClassName('items_container'),\n  task_1: document.getElementById('task_1'),\n  task_2: document.getElementById('task_2'),\n  counter: document.getElementById('counter'),\n  imageDiv: document.getElementsByClassName(\"logo_container\"),\n});\n\napp.run();"]}